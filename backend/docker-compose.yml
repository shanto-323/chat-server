services:

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.14.3
    container_name: elastic-search
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
    ports:
      - "9200:9200"
    volumes:
      - elk-data:/usr/share/elasticsearch/data

  kibana:
    image: docker.elastic.co/kibana/kibana:8.14.3
    container_name: kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on: 
      - elasticsearch
  


  logstash:
    image: docker.elastic.co/logstash/logstash:8.14.3
    container_name: logstash
    ports:
      - "5044:5044"
    volumes:
      - ../backend/pipeline.conf:/usr/share/logstash/pipeline/logstash.conf:ro
    depends_on: 
      - elasticsearch
  

  nginx:
    image: nginx:stable-alpine3.21-perl
    container_name: nginx
    volumes:
      - ../backend/nginx.conf:/etc/nginx/conf.d/default.conf:ro
    ports:
      - "3000:80"


  postgres:
    container_name: postgres
    image: postgres:latest
    env_file:
      - .env
    ports:
      - 5432:5432
    restart: unless-stopped


  redis:
    container_name: redis1
    image: redis:8.2-m01-alpine3.22
    ports:
      - 6379:6379
    healthcheck:
      test: [ "CMD-SHELL", "redis-cli -a 123456 ping | grep pong || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped


  scylla:
    container_name: scyllaDb
    image: scylladb/scylla:latest
    ports:
      - 9042:9042
    healthcheck:
      test: [ "CMD-SHELL", "nodetool status | grep UN || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped


  migration:
    image: scylladb/scylla:latest
    depends_on:
      scylla:
        condition: service_healthy
    volumes:
      - ./message-service/pkg/migrations:/migrations
      - ./message-service/pkg/script:/script
    entrypoint: ["/script/migration.sh"]
    restart: "no"


  rabbitmq:
    image: rabbitmq:3.13.7-management-alpine
    container_name: rabbit-mq
    env_file:
      - .env
    ports:
      - 5672:5672
      - 15672:15672
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: on-failure


# Service

  gateway-1:
    container_name: gateway-1
    build:
      context: .
      dockerfile: ./gateway-1/Dockerfile
    env_file:
      - .env
    ports:
      - 8080:8080
    restart: on-failure


  client-service:
    container_name: client-service
    build: 
      context: ./client-service
      dockerfile: Dockerfile 
    depends_on:
      - postgres
      - redis
    env_file:
      - .env
    ports:
      - 8081:8081
    restart: on-failure


  message-service:
    container_name: message-service
    build: 
      context: .
      dockerfile: ./message-service/Dockerfile
    depends_on:
      rabbitmq:
        condition: service_healthy 
    env_file:
      - .env
    ports:
      - 8082:8082
    restart: on-failure




volumes:
  elk-data:
